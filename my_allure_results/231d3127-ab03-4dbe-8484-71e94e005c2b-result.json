{"name": "test_products_group", "status": "skipped", "statusDetails": {"message": "XFAIL Wait for fix bug\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://test.qa.studio?products_group=sale\" class=\"tab-sale \">...</a> is not clickable at point (708, 694). Other element would receive the click: <div class=\"catalog-toolbar-tabs__content\">...</div>\n  (Session info: chrome=108.0.5359.125)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00F9F243]\n\t(No symbol) [0x00F27FD1]\n\t(No symbol) [0x00E1D04D]\n\t(No symbol) [0x00E528B9]\n\t(No symbol) [0x00E508CC]\n\t(No symbol) [0x00E4E4CB]\n\t(No symbol) [0x00E4D164]\n\t(No symbol) [0x00E432A6]\n\t(No symbol) [0x00E6858C]\n\t(No symbol) [0x00E42BFF]\n\t(No symbol) [0x00E68804]\n\t(No symbol) [0x00E7C9EB]\n\t(No symbol) [0x00E68386]\n\t(No symbol) [0x00E4163C]\n\t(No symbol) [0x00E4269D]\n\tGetHandleVerifier [0x01239A22+2655074]\n\tGetHandleVerifier [0x0122CA24+2601828]\n\tGetHandleVerifier [0x01048C0A+619850]\n\tGetHandleVerifier [0x01047830+614768]\n\t(No symbol) [0x00F305FC]\n\t(No symbol) [0x00F35968]\n\t(No symbol) [0x00F35A55]\n\t(No symbol) [0x00F4051B]\n\tBaseThreadInitThunk [0x763700F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E17BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77E17B8E+238]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"45682115d73cb373033462d2df1a7f0a\")>\n\n    @pytest.mark.xfail(reason=\"Wait for fix bug\")\n    def test_products_group(browser):\n        \"\"\"\n        Test case TC-2\n        \"\"\"\n        expected_menu = [\n            (\"Все\", \"\", \"[class='tab-all active']\"),\n            (\"Бестселлеры\", \"/?products_group=best_sellers\", \"[class='tab-best_sellers ']\"),\n            (\"Горячие товары\", \"/?products_group=featured\", \"[class='tab-featured ']\"),\n            (\"Новые товары\", \"/?products_group=new\", \"[class='tab-new ']\"),\n            (\"Распродажа товаров\", \"/?products_group=sale\", \"[class='tab-sale ']\")\n        ]\n    \n        browser.get(URL)\n        menu_element = \"[class='catalog-toolbar-tabs__content'] a\"\n        elements = browser.find_elements(by=By.CSS_SELECTOR, value=menu_element)\n        assert len(elements) == len(expected_menu), \"Unexpected number of products group\"\n    \n        for item in expected_menu:\n            element = browser.find_element(by=By.CSS_SELECTOR, value=item[2])\n>           element.click()\n\ntests\\test_shop.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026A8E1A6850>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E17B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://test.qa.studio?products_group=sale\" class=\"tab-sale \">...</a> is not clickable at point (708, 694). Other element would receive the click: <div class=\"catalog-toolbar-tabs__content\">...</div>\nE         (Session info: chrome=108.0.5359.125)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00F9F243]\nE       \t(No symbol) [0x00F27FD1]\nE       \t(No symbol) [0x00E1D04D]\nE       \t(No symbol) [0x00E528B9]\nE       \t(No symbol) [0x00E508CC]\nE       \t(No symbol) [0x00E4E4CB]\nE       \t(No symbol) [0x00E4D164]\nE       \t(No symbol) [0x00E432A6]\nE       \t(No symbol) [0x00E6858C]\nE       \t(No symbol) [0x00E42BFF]\nE       \t(No symbol) [0x00E68804]\nE       \t(No symbol) [0x00E7C9EB]\nE       \t(No symbol) [0x00E68386]\nE       \t(No symbol) [0x00E4163C]\nE       \t(No symbol) [0x00E4269D]\nE       \tGetHandleVerifier [0x01239A22+2655074]\nE       \tGetHandleVerifier [0x0122CA24+2601828]\nE       \tGetHandleVerifier [0x01048C0A+619850]\nE       \tGetHandleVerifier [0x01047830+614768]\nE       \t(No symbol) [0x00F305FC]\nE       \t(No symbol) [0x00F35968]\nE       \t(No symbol) [0x00F35A55]\nE       \t(No symbol) [0x00F4051B]\nE       \tBaseThreadInitThunk [0x763700F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E17B8E+238]\n\n..\\..\\..\\AppData\\Roaming\\Python\\Python311\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: ElementClickInterceptedException"}, "description": "\n    Test case TC-2\n    ", "start": 1671648026443, "stop": 1671648031147, "uuid": "a82f9fc4-2fcb-44df-8a0d-ba9f09fa9387", "historyId": "09ac6b905e7ac66417c95d86a058a7ca", "testCaseId": "4fdd6adba16e950b161eae73ef4ccb14", "fullName": "tests.test_shop#test_products_group", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(reason='Wait for fix bug')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_shop"}, {"name": "host", "value": "by-temp01"}, {"name": "thread", "value": "11360-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_shop"}]}